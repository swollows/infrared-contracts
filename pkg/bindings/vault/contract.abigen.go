// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vault

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_stakingToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_infrared\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_pool\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_rewardsModule\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_distributionModule\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_rewardTokens\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"_rewardsDuration\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DISTRIBUTION_MODULE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDistributionModule\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"INFRARED_ADDRESS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"INFRARED_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_NUM_REWARD_TOKENS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"POOL_ADDRESS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"REWARDS_MODULE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIRewardsModule\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addReward\",\"inputs\":[{\"name\":\"_rewardsToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_rewardsDuration\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"bgtDenom\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"claimRewardsPrecompile\",\"inputs\":[],\"outputs\":[{\"name\":\"_amt\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"earned\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_rewardsToken\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"exit\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getReward\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getRewardForDuration\",\"inputs\":[{\"name\":\"_rewardsToken\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRewardForUser\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getWithdrawAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastTimeRewardApplicable\",\"inputs\":[{\"name\":\"_rewardsToken\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"notifyRewardAmount\",\"inputs\":[{\"name\":\"_rewardToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_reward\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"recoverERC20\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"rewardData\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"rewardsDistributor\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"rewardsDuration\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"periodFinish\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"rewardRate\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"lastUpdateTime\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"rewardPerToken\",\"inputs\":[{\"name\":\"_rewardsToken\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"rewardTokens\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"rewards\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"stake\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stakingToken\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"togglePause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"updateRewardsDuration\",\"inputs\":[{\"name\":\"_rewardsToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_rewardsDuration\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"userRewardPerTokenPaid\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ClaimRewardsPrecompile\",\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"_amt\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Recovered\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardAdded\",\"inputs\":[{\"name\":\"reward\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardPaid\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"rewardsToken\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"reward\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardStored\",\"inputs\":[{\"name\":\"rewardsToken\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"rewardsDuration\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardsDurationUpdated\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"newDuration\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Staked\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UpdateWithdrawAddress\",\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"_oldWithdrawAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"_newWithdrawAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Withdrawn\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"AddressEmptyCode\",\"inputs\":[{\"name\":\"target\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"AddressInsufficientBalance\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"EnforcedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ExpectedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FailedInnerCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MaxNumberOfRewards\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SafeERC20FailedOperation\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"SetWithdrawAddressFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroAmount\",\"inputs\":[]}]",
	Bin: "0x6101008060405234620002b957620029558038038091620000218285620004ac565b833981019061010081830312620002b9576200003d81620004d0565b906200004c60208201620004d0565b926200005b60408301620004d0565b916200006a60608201620004d0565b906200007960808201620004d0565b916200008860a08301620004d0565b60c08301516001600160401b039591939190868111620002b957820181601f82011215620002b9578051968711620002a5578660051b9060405197620000d2602084018a620004ac565b8852602080890192820101928311620002b957602001905b828210620004915750505060e0015160015f81905580546001600160a81b03191660088a901b610100600160a81b0316179055966001600160a01b03871615620002bd576001600160a01b031615620002bd576001600160a01b03851615620002bd576001600160a01b03831615620002bd576001600160a01b03821615620002bd5786156200047f57600a8451116200046d575f5b8451811015620002cf576001600160a01b036200019e8287620004e5565b511615620002bd576001600160a01b03620001ba8287620004e5565b511690815f526002602052600160405f200154620002b9576003549168010000000000000000831015620002a557600183018060035583101562000291577fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90920180546001600160a01b031990811684179091555f8381526002602090815260409182902080549093166001600160a01b038b1617835560019283018c9055815194855284018b905290927f7589b0732052d2ded19f37e278ed2ae0d7d2e93b21d3931b73c5200a136716539190a10162000180565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b60405163d92e233d60e01b8152600490fd5b5060209350620002e15f9596620004fa565b50620002ed866200056a565b5060808690526001600160a01b0381161515851462000465575b60a0526001600160a01b0391821660c081905290821660e0526040516356c4d0db60e01b815291851660048301529092839160249183915af190811562000436575f9162000441575b5015620003ee5760e051604051630eac692560e21b81526001600160a01b03928316600482015291602091839160249183915f91165af190811562000436575f9162000400575b5015620003ee576040516122ef9081620006268239608051818181610ea60152610fd2015260a0518181816101d501526119b1015260c05181818161070a0152818161159c01526119e0015260e051816116600152f35b604051631a8e7ecb60e01b8152600490fd5b62000427915060203d6020116200042e575b6200041e8183620004ac565b8101906200060b565b8162000397565b503d62000412565b6040513d5f823e3d90fd5b6200045e915060203d6020116200042e576200041e8183620004ac565b8262000350565b503062000307565b60405163aa4f98e760e01b8152600490fd5b604051631f2a200560e01b8152600490fd5b60208091620004a084620004d0565b815201910190620000ea565b601f909101601f19168101906001600160401b03821190821017620002a557604052565b51906001600160a01b0382168203620002b957565b8051821015620002915760209160051b010190565b6001600160a01b03165f8181525f8051602062002935833981519152602052604090205460ff1662000565575f8181525f805160206200293583398151915260205260408120805460ff191660011790553391905f80516020620029158339815191528180a4600190565b505f90565b6001600160a01b03165f8181527ff561aca94d6a84baee3f14b9a9262ef186d552ce9c80a17d7649f4ea8645f86e60205260409020547f0365465a8778581431da8812e4871eb793dd8b262239ab4ad4f7153422cd7410919060ff166200060557815f52600860205260405f20815f5260205260405f20600160ff1982541617905533915f80516020620029158339815191525f80a4600190565b50505f90565b90816020910312620002b957518015158103620002b9579056fe6080604090808252600480361015610015575f80fd5b5f3560e01c91826301ffc9a714611802575081631171bda91461168f578163152256871461164c5781631668100a146115e957816318160ddd146115cb5781631f6d8c4814611588578163211dc32d1461155b578163248a9ca3146115315781632e1a7d4d146113c15781632f2ff15d1461139957816336568abe146113555781633d18b912146111ea57816348e5d9f81461117a5781635c975abb14611157578163638634ee146111325781637035ab98146110e857816370a08231146110b157816372f702f3146110855781637bb7bed11461104557816391d148541461100157816391ededb814610fbe57816397d4171f14610f755781639feb8f5014610db5578163a217fddf14610d9b578163a694fc3a14610c16578163b66503cf14610a13578163bcd11014146109d1578163c004ac61146108c9578163c4ae316814610814578163d547741f146107d8578163e70b9e271461078f578163e8e7f800146106d5578163e9fad8ee146103ed578163ef790a821461027657508063f12297771461024a578063f65ae9591461022f578063f8bb49b9146102085763fe94df88146101c2575f80fd5b34610204575f36600319011261020457517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b5034610204575f36600319011261020457602090515f805160206122c38339815191528152f35b5034610204575f3660031901126102045760209051600a8152f35b50346102045760203660031901126102045760209061026f61026a611854565b611c8e565b9051908152f35b8234610204576020918260031936011261020457610292611854565b9161029b611ffa565b6001600160a01b03938385169283151591905f5b876003805483101561034b579082916102c9600194611880565b9054911b1c166102d881611c8e565b815f526002808752600591828a5f200155876102f384611c69565b845f52828952878b5f20015561030d575b505050016102af565b610317838c611bec565b8a5f52828852895f20845f528852895f20558652875f20015490885f52848652875f20905f528552865f2055898080610304565b50838888885f5b60039081548110156103e7578660019261036b83611880565b9054911b1c16845f52846005808952855f20835f52895288865f205480610398575b505050505001610352565b7f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e92845f528252875f20855f5282525f888120556103d7818b8761201b565b8751908152a3878481888161038d565b60015f55005b905034610204575f36600319011261020457335f5260209060078252825f205492610416611ffa565b3315155f5b600380548210156104bd579060019161043382611880565b9054911b1c60a083901b8390031661044a81611c8e565b815f52600280895260059182885f2001558561046584611c69565b845f52828b5289895f20015561047f575b5050500161041b565b6104898333611bec565b335f52828a52875f20845f528a52875f20558852855f20015490335f52868852855f20905f528752845f20555f8080610476565b5050929193801561069e576104d481600654611e21565b600655335f52600783526104eb81835f2054611e21565b335f5260078452825f205560018060a01b039060019586958261051688943387875460081c1661201b565b85519081527f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5873392a2825f5561054b611ffa565b5f835b6105fc575b5050505f905b610564575b5f859055005b60039081548110156105f65782869261057c83611880565b9054911b1c16335f526005808752855f20825f528752855f205490816105a7575b5050500184610559565b335f528752855f20825f5287525f868120556105c481338461201b565b85519081527f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e873392a35f808061059d565b5061055e565b60039085825482101561069757859261061483611880565b9054911b1c1661062381611c8e565b815f526002808b52600591828b5f2001558561063e84611c69565b845f52828d52888c5f200155610659575b505050018361054e565b6106638333611bec565b335f52828c528a5f20845f528c528a5f20558a52885f20015490335f52858a52885f20905f528952875f20555f808061064f565b5050610553565b815162461bcd60e51b81528086018490526011602482015270043616e6e6f74207769746864726177203607c1b6044820152606490fd5b8234610204575f366003190112610204578051630a957da760e31b815230928101929092526001600160a01b036020836024817f000000000000000000000000000000000000000000000000000000000000000085165afa918215610786575f92610746575b602093505191168152f35b9150916020813d60201161077e575b81610762602093836118c9565b810103126102045751918083168303610204576020929161073b565b3d9150610755565b513d5f823e3d90fd5b82346102045780600319360112610204576020906107ab611854565b6107b361186a565b9060018060a01b038091165f5260058452825f2091165f528252805f20549051908152f35b8234610204578060031936011261020457610812913561080d60016107fb61186a565b93835f5260086020525f200154611d7a565b6120d6565b005b8234610204575f3660031901126102045761082d611d24565b60015460ff81161561088957506001549160ff83161561087b57506020907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9260ff191660015551338152a1005b9051638dfc202b60e01b8152fd5b7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25892509060016020926108ba61214a565b60ff19161760015551338152a1005b9050346102045781600319360112610204576108e3611854565b602435916108ef611d24565b6001600160a01b0382169081156109c35783156109b557815f5260026020526002855f20015442111561097257505f908152600260209081529084902060010183905592516001600160a01b039091168152918201527fad2f86b01ed93b4b3a150d448c61a4f5d8d38075d3c0c64cc0a26fd6e1f495459080604081015b0390a1005b606490602086519162461bcd60e51b8352820152601a60248201527f52657761726420706572696f64207374696c6c206163746976650000000000006044820152fd5b8451631f2a200560e01b8152fd5b845163d92e233d60e01b8152fd5b8234610204576020366003190112610204576020906001600160a01b036109f6611854565b165f526002825261026f815f206001600382015491015490611f2e565b905034610204578160031936011261020457610a2d611854565b91602435915f805160206122c383398151915291825f5260209260088452815f20335f52845260ff825f2054161580610bf9575b610bdd57506001600160a01b03948516948515610bcf578415610bc1575f5b60038054821015610ad2579082600192610a9983611880565b9054911b1c16610aa881611c8e565b815f526002908189526005875f200155610ac182611c69565b915f52875285855f20015501610a80565b505050847fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9492610b0584303385612168565b815f52610b5e600160029283885283865f200154804210155f14610b705750845f52838852610b3982875f20015488611f4c565b855f528489526003875f2001555b845f52838852855f20904290820155015442611fa1565b915f52808552825f20015551908152a1005b610b9d610b97610b84610baf934290611e21565b885f52878c5260038a5f20015490611f2e565b89611fa1565b865f52858a5283885f20015490611f4c565b855f528489526003875f200155610b47565b5051631f2a200560e01b8152fd5b505163d92e233d60e01b8152fd5b60449291519163e2517d3f60e01b835233908301526024820152fd5b505f805260088452815f20335f52845260ff825f20541615610a61565b8234610204576020918260031936011261020457803591610c35611ffa565b610c3d61214a565b3315155f5b60038054821015610ce45790600191610c5a82611880565b9054911b1c60a083901b83900316610c7181611c8e565b815f526002808a5260059182885f20015585610c8c84611c69565b845f52828c5289895f200155610ca6575b50505001610c42565b610cb08333611bec565b335f52828b52875f20845f528b52875f20558952855f20015490335f52868952855f20905f528852845f2055878080610c9d565b50505092908215610d6957508192610d1f7f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d93600654611fa1565b600655335f5260078252610d3684825f2054611fa1565b335f5260078352815f2055610d5c8460018060a01b0360015460081c1630903390612168565b519283523392a260015f55005b60649184519162461bcd60e51b8352820152600e60248201526d043616e6e6f74207374616b6520360941b6044820152fd5b8234610204575f36600319011261020457602090515f8152f35b905034610204578160031936011261020457610dcf611854565b602435915f805160206122c3833981519152805f5260209060088252855f20335f52825260ff865f2054161580610f58575b610f3a57506001600160a01b0391838316908115610f2c578515610f1e5760035490600a8214610f1057825f52600284526001885f2001546102045768010000000000000000821015610efd575061096d9360027f7589b0732052d2ded19f37e278ed2ae0d7d2e93b21d3931b73c5200a1367165398948894610e8b856001809701600355611880565b81549060031b908684831b921b19161790555f5252835f20907f0000000000000000000000000000000000000000000000000000000000000000166bffffffffffffffffffffffff60a01b8254161781550155519283928360209093929193604081019460018060a01b031681520152565b604190634e487b7160e01b5f525260245ffd5b875163aa4f98e760e01b8152fd5b8651631f2a200560e01b8152fd5b865163d92e233d60e01b8152fd5b855163e2517d3f60e01b815233818501526024810191909152604490fd5b505f805260088252855f20335f52825260ff865f20541615610e01565b8234610204575f36600319011261020457610f8e61191b565b908051809260208252610fb0815180928160208601526020868601910161194c565b601f01601f19168101030190f35b8234610204575f36600319011261020457517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b823461020457806003193601126102045760209161101d61186a565b90355f5260088352815f209060018060a01b03165f52825260ff815f20541690519015158152f35b9050346102045760203660031901126102045735906003548210156102045761106f602092611880565b60018060a01b0391549060031b1c169051908152f35b8234610204575f36600319011261020457600154905160089190911c6001600160a01b03168152602090f35b8234610204576020366003190112610204576020906001600160a01b036110d6611854565b165f5260078252805f20549051908152f35b8234610204578060031936011261020457602091611104611854565b61110c61186a565b6001600160a01b039182165f908152928552838320911682528352819020549051908152f35b82346102045760203660031901126102045760209061026f611152611854565b611c69565b8234610204575f3660031901126102045760209060ff6001541690519015158152f35b9050346102045760203660031901126102045760c0916001600160a01b03806111a1611854565b165f526002602052815f209081541692600182015492600283015490600560038501549385015494015494815196875260208701528501526060840152608083015260a0820152f35b905034610204575f3660031901126102045790611205611ffa565b331515915f5b600380548210156112b3579060019161122382611880565b9054911b1c60a083901b8390031661123a81611c8e565b90805f5260029160209280845260059182895f2001558861125a84611c69565b845f52828652888a5f200155611275575b505050500161120b565b61127f8333611bec565b335f52828552885f20845f528552885f20558352865f20015491335f52858152865f20915f5252845f20555f80808061126b565b835f5b60039081548110156103e7576001916112ce82611880565b848060a09493941b039254911b1c16335f526005602090808252855f20835f528252855f20549182611305575b50505050016112b6565b7f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e91335f528152865f20845f5281525f8781205561134483338661201b565b86519283523392a3838080806112fb565b823461020457806003193601126102045761136e61186a565b90336001600160a01b0383160361138a575061081291356120d6565b5163334bd91960e11b81529050fd5b823461020457806003193601126102045761081291356113bc60016107fb61186a565b61205e565b82346102045760209182600319360112610204578035916113e0611ffa565b3315155f5b6003805482101561148757906001916113fd82611880565b9054911b1c60a083901b8390031661141481611c8e565b815f526002808a5260059182885f2001558561142f84611c69565b845f52828c5289895f200155611449575b505050016113e5565b6114538333611bec565b335f52828b52875f20845f528b52875f20558952855f20015490335f52868952855f20905f528852845f2055878080611440565b505050929082156114fc575081926114c27f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d593600654611e21565b600655335f52600782526114d984825f2054611e21565b335f5260078352815f2055610d5c843360018060a01b0360015460081c1661201b565b60649184519162461bcd60e51b83528201526011602482015270043616e6e6f74207769746864726177203607c1b6044820152fd5b823461020457602036600319011261020457602091355f52600882526001815f2001549051908152f35b823461020457806003193601126102045760209061026f61157a611854565b61158261186a565b90611bec565b8234610204575f36600319011261020457517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b8234610204575f366003190112610204576020906006549051908152f35b905034610204575f366003190112610204575f805160206122c3833981519152805f526008602052825f20335f5260205260ff835f205416156116315760208361026f611995565b604492519163e2517d3f60e01b835233908301526024820152fd5b8234610204575f36600319011261020457517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b905034610204576060366003190112610204576116aa611854565b6116b261186a565b90604435926116bf611d24565b6001600160a01b0390828216156117f4578184169182156117e55785156117d65760015460081c16821461179357815f52600260205280865f2001546117505750936117308461096d937f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289761201b565b516001600160a01b03909216825260208201929092529081906040820190565b606490602087519162461bcd60e51b8352820152601c60248201527f43616e6e6f742077697468647261772072657761726420746f6b656e000000006044820152fd5b606490602087519162461bcd60e51b8352820152601d60248201527f43616e6e6f74207769746864726177207374616b696e6720746f6b656e0000006044820152fd5b508551631f2a200560e01b8152fd5b50855163d92e233d60e01b8152fd5b855163d92e233d60e01b8152fd5b903461020457602036600319011261020457359063ffffffff60e01b821680920361020457602091637965db0b60e01b8114908115611843575b5015158152f35b6301ffc9a760e01b1490508361183c565b600435906001600160a01b038216820361020457565b602435906001600160a01b038216820361020457565b6003548110156118b55760035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01905f90565b634e487b7160e01b5f52603260045260245ffd5b90601f8019910116810190811067ffffffffffffffff8211176118eb57604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff81116118eb57601f01601f191660200190565b604051906040820182811067ffffffffffffffff8211176118eb576040526004825263185899dd60e21b6020830152565b5f5b83811061195d5750505f910152565b818101518382015260200161194e565b1561197457565b634e487b7160e01b5f52600160045260245ffd5b8051156118b55760200190565b60018060a01b03604090815163c02e892960e01b8152600491807f00000000000000000000000000000000000000000000000000000000000000001660048301525f826024818382957f0000000000000000000000000000000000000000000000000000000000000000165af1928315611be2575f93611aac575b505050611a2160018251111561196d565b805115611aa6577fb7a755b112a307af4a5aa3ad493461021b8f07e3c5a02599a8ade84a7d2b678e611a99611aa193611a77611a726020611a6187611988565b510151611a6c61191b565b90611dcd565b61196d565b611a8084611988565b5151905133815260208101919091529081906040820190565b0390a1611988565b515190565b50505f90565b909192503d805f853e611abf81856118c9565b830190602092838584031261020457845167ffffffffffffffff9586821161020457019280601f85011215610204578351958087116118eb578660051b93885197611b0c8887018a6118c9565b885286808901958701019583871161020457878101955b878710611b3b575050505050505050505f8080611a10565b86518481116102045782018b601f198288030112610204578b51908c820182811087821117611bd0578d528a81015182528c8101519086821161020457019186603f84011215610204578a830151918d88611b95856118ff565b91611ba2815193846118c9565b858352858701011161020457611bc18f948e968796878501910161194c565b83820152815201960195611b23565b88604187634e487b7160e01b5f52525ffd5b84513d5f823e3d90fd5b611c6691670de0b6b3a7640000611c4860018060a01b0380941693845f526007602052611c4260405f205491611c2186611c8e565b90875f52600460205260405f20961695865f5260205260405f205490611e21565b90611f2e565b04915f52600560205260405f20905f5260205260405f205490611fa1565b90565b60018060a01b03165f526002602052600260405f2001548042105f14611c6657504290565b6006548015611d065790611d00611c6692611cfb611cf660018060a01b038516805f526002602052611ce0611cca600560405f20015497611c69565b825f526002602052600460405f20015490611e21565b905f526002602052600360405f20015490611f2e565b611eac565b611f4c565b90611fa1565b506001600160a01b03165f9081526002602052604090206005015490565b335f9081527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7602052604090205460ff1615611d5c57565b60405163e2517d3f60e01b81523360048201525f6024820152604490fd5b805f52600860205260405f20335f5260205260ff60405f20541615611d9c5750565b60405163e2517d3f60e01b81523360048201526024810191909152604490fd5b9081518110156118b5570160200190565b908151815103611aa6575f5b8251811015611e19576001600160f81b031980611df68386611dbc565b511690611e038385611dbc565b511603611e1257600101611dd9565b5050505f90565b505050600190565b90818111611e49578103908111611e355790565b634e487b7160e01b5f52601160045260245ffd5b60405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606490fd5b8115611e98570490565b634e487b7160e01b5f52601260045260245ffd5b8015611f2957670de0b6b3a7640000808202918083048203611e3557611ed29083611e8e565b03611eda5790565b60405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608490fd5b505f90565b908115611aa657808202918083048203611e3557611ed29083611e8e565b908015611f5c57611c6691611e8e565b60405162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606490fd5b90810190818111611e35578110611fb55790565b60405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606490fd5b60025f54146120095760025f55565b604051633ee5aeb560e01b8152600490fd5b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261205c916120576064836118c9565b6121bd565b565b90815f52600860205260405f209060018060a01b031690815f5260205260ff60405f205416155f14611aa657815f52600860205260405f20815f5260205260405f20600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b90815f52600860205260405f209060018060a01b031690815f5260205260ff60405f2054165f14611aa657815f52600860205260405f20815f5260205260405f2060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b60ff6001541661215657565b60405163d93c066560e01b8152600490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff8411176118eb5761205c926040525b5f806122059260018060a01b03169360208151910182865af13d15612257573d906121e7826118ff565b916121f560405193846118c9565b82523d5f602084013e5b8361225f565b8051908115159182612233575b505061221b5750565b60249060405190635274afe760e01b82526004820152fd5b81925090602091810103126102045760200151801590811503610204575f80612212565b6060906121ff565b90612286575080511561227457805190602001fd5b604051630a12f52160e11b8152600490fd5b815115806122b9575b612297575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561228f56fe0365465a8778581431da8812e4871eb793dd8b262239ab4ad4f7153422cd7410a164736f6c6343000816000a2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend, _admin common.Address, _stakingToken common.Address, _infrared common.Address, _pool common.Address, _rewardsModule common.Address, _distributionModule common.Address, _rewardTokens []common.Address, _rewardsDuration *big.Int) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend, _admin, _stakingToken, _infrared, _pool, _rewardsModule, _distributionModule, _rewardTokens, _rewardsDuration)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Contract *ContractCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Contract *ContractSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Contract.Contract.DEFAULTADMINROLE(&_Contract.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Contract *ContractCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Contract.Contract.DEFAULTADMINROLE(&_Contract.CallOpts)
}

// DISTRIBUTIONMODULE is a free data retrieval call binding the contract method 0x15225687.
//
// Solidity: function DISTRIBUTION_MODULE() view returns(address)
func (_Contract *ContractCaller) DISTRIBUTIONMODULE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "DISTRIBUTION_MODULE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DISTRIBUTIONMODULE is a free data retrieval call binding the contract method 0x15225687.
//
// Solidity: function DISTRIBUTION_MODULE() view returns(address)
func (_Contract *ContractSession) DISTRIBUTIONMODULE() (common.Address, error) {
	return _Contract.Contract.DISTRIBUTIONMODULE(&_Contract.CallOpts)
}

// DISTRIBUTIONMODULE is a free data retrieval call binding the contract method 0x15225687.
//
// Solidity: function DISTRIBUTION_MODULE() view returns(address)
func (_Contract *ContractCallerSession) DISTRIBUTIONMODULE() (common.Address, error) {
	return _Contract.Contract.DISTRIBUTIONMODULE(&_Contract.CallOpts)
}

// INFRAREDADDRESS is a free data retrieval call binding the contract method 0x91ededb8.
//
// Solidity: function INFRARED_ADDRESS() view returns(address)
func (_Contract *ContractCaller) INFRAREDADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "INFRARED_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// INFRAREDADDRESS is a free data retrieval call binding the contract method 0x91ededb8.
//
// Solidity: function INFRARED_ADDRESS() view returns(address)
func (_Contract *ContractSession) INFRAREDADDRESS() (common.Address, error) {
	return _Contract.Contract.INFRAREDADDRESS(&_Contract.CallOpts)
}

// INFRAREDADDRESS is a free data retrieval call binding the contract method 0x91ededb8.
//
// Solidity: function INFRARED_ADDRESS() view returns(address)
func (_Contract *ContractCallerSession) INFRAREDADDRESS() (common.Address, error) {
	return _Contract.Contract.INFRAREDADDRESS(&_Contract.CallOpts)
}

// INFRAREDROLE is a free data retrieval call binding the contract method 0xf8bb49b9.
//
// Solidity: function INFRARED_ROLE() view returns(bytes32)
func (_Contract *ContractCaller) INFRAREDROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "INFRARED_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// INFRAREDROLE is a free data retrieval call binding the contract method 0xf8bb49b9.
//
// Solidity: function INFRARED_ROLE() view returns(bytes32)
func (_Contract *ContractSession) INFRAREDROLE() ([32]byte, error) {
	return _Contract.Contract.INFRAREDROLE(&_Contract.CallOpts)
}

// INFRAREDROLE is a free data retrieval call binding the contract method 0xf8bb49b9.
//
// Solidity: function INFRARED_ROLE() view returns(bytes32)
func (_Contract *ContractCallerSession) INFRAREDROLE() ([32]byte, error) {
	return _Contract.Contract.INFRAREDROLE(&_Contract.CallOpts)
}

// MAXNUMREWARDTOKENS is a free data retrieval call binding the contract method 0xf65ae959.
//
// Solidity: function MAX_NUM_REWARD_TOKENS() view returns(uint256)
func (_Contract *ContractCaller) MAXNUMREWARDTOKENS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "MAX_NUM_REWARD_TOKENS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXNUMREWARDTOKENS is a free data retrieval call binding the contract method 0xf65ae959.
//
// Solidity: function MAX_NUM_REWARD_TOKENS() view returns(uint256)
func (_Contract *ContractSession) MAXNUMREWARDTOKENS() (*big.Int, error) {
	return _Contract.Contract.MAXNUMREWARDTOKENS(&_Contract.CallOpts)
}

// MAXNUMREWARDTOKENS is a free data retrieval call binding the contract method 0xf65ae959.
//
// Solidity: function MAX_NUM_REWARD_TOKENS() view returns(uint256)
func (_Contract *ContractCallerSession) MAXNUMREWARDTOKENS() (*big.Int, error) {
	return _Contract.Contract.MAXNUMREWARDTOKENS(&_Contract.CallOpts)
}

// POOLADDRESS is a free data retrieval call binding the contract method 0xfe94df88.
//
// Solidity: function POOL_ADDRESS() view returns(address)
func (_Contract *ContractCaller) POOLADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "POOL_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POOLADDRESS is a free data retrieval call binding the contract method 0xfe94df88.
//
// Solidity: function POOL_ADDRESS() view returns(address)
func (_Contract *ContractSession) POOLADDRESS() (common.Address, error) {
	return _Contract.Contract.POOLADDRESS(&_Contract.CallOpts)
}

// POOLADDRESS is a free data retrieval call binding the contract method 0xfe94df88.
//
// Solidity: function POOL_ADDRESS() view returns(address)
func (_Contract *ContractCallerSession) POOLADDRESS() (common.Address, error) {
	return _Contract.Contract.POOLADDRESS(&_Contract.CallOpts)
}

// REWARDSMODULE is a free data retrieval call binding the contract method 0x1f6d8c48.
//
// Solidity: function REWARDS_MODULE() view returns(address)
func (_Contract *ContractCaller) REWARDSMODULE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "REWARDS_MODULE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// REWARDSMODULE is a free data retrieval call binding the contract method 0x1f6d8c48.
//
// Solidity: function REWARDS_MODULE() view returns(address)
func (_Contract *ContractSession) REWARDSMODULE() (common.Address, error) {
	return _Contract.Contract.REWARDSMODULE(&_Contract.CallOpts)
}

// REWARDSMODULE is a free data retrieval call binding the contract method 0x1f6d8c48.
//
// Solidity: function REWARDS_MODULE() view returns(address)
func (_Contract *ContractCallerSession) REWARDSMODULE() (common.Address, error) {
	return _Contract.Contract.REWARDSMODULE(&_Contract.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256 _balance)
func (_Contract *ContractCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256 _balance)
func (_Contract *ContractSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256 _balance)
func (_Contract *ContractCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, account)
}

// BgtDenom is a free data retrieval call binding the contract method 0x97d4171f.
//
// Solidity: function bgtDenom() view returns(string)
func (_Contract *ContractCaller) BgtDenom(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "bgtDenom")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BgtDenom is a free data retrieval call binding the contract method 0x97d4171f.
//
// Solidity: function bgtDenom() view returns(string)
func (_Contract *ContractSession) BgtDenom() (string, error) {
	return _Contract.Contract.BgtDenom(&_Contract.CallOpts)
}

// BgtDenom is a free data retrieval call binding the contract method 0x97d4171f.
//
// Solidity: function bgtDenom() view returns(string)
func (_Contract *ContractCallerSession) BgtDenom() (string, error) {
	return _Contract.Contract.BgtDenom(&_Contract.CallOpts)
}

// Earned is a free data retrieval call binding the contract method 0x211dc32d.
//
// Solidity: function earned(address account, address _rewardsToken) view returns(uint256)
func (_Contract *ContractCaller) Earned(opts *bind.CallOpts, account common.Address, _rewardsToken common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "earned", account, _rewardsToken)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Earned is a free data retrieval call binding the contract method 0x211dc32d.
//
// Solidity: function earned(address account, address _rewardsToken) view returns(uint256)
func (_Contract *ContractSession) Earned(account common.Address, _rewardsToken common.Address) (*big.Int, error) {
	return _Contract.Contract.Earned(&_Contract.CallOpts, account, _rewardsToken)
}

// Earned is a free data retrieval call binding the contract method 0x211dc32d.
//
// Solidity: function earned(address account, address _rewardsToken) view returns(uint256)
func (_Contract *ContractCallerSession) Earned(account common.Address, _rewardsToken common.Address) (*big.Int, error) {
	return _Contract.Contract.Earned(&_Contract.CallOpts, account, _rewardsToken)
}

// GetRewardForDuration is a free data retrieval call binding the contract method 0xbcd11014.
//
// Solidity: function getRewardForDuration(address _rewardsToken) view returns(uint256)
func (_Contract *ContractCaller) GetRewardForDuration(opts *bind.CallOpts, _rewardsToken common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getRewardForDuration", _rewardsToken)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRewardForDuration is a free data retrieval call binding the contract method 0xbcd11014.
//
// Solidity: function getRewardForDuration(address _rewardsToken) view returns(uint256)
func (_Contract *ContractSession) GetRewardForDuration(_rewardsToken common.Address) (*big.Int, error) {
	return _Contract.Contract.GetRewardForDuration(&_Contract.CallOpts, _rewardsToken)
}

// GetRewardForDuration is a free data retrieval call binding the contract method 0xbcd11014.
//
// Solidity: function getRewardForDuration(address _rewardsToken) view returns(uint256)
func (_Contract *ContractCallerSession) GetRewardForDuration(_rewardsToken common.Address) (*big.Int, error) {
	return _Contract.Contract.GetRewardForDuration(&_Contract.CallOpts, _rewardsToken)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Contract *ContractCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Contract *ContractSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Contract.Contract.GetRoleAdmin(&_Contract.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Contract *ContractCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Contract.Contract.GetRoleAdmin(&_Contract.CallOpts, role)
}

// GetWithdrawAddress is a free data retrieval call binding the contract method 0xe8e7f800.
//
// Solidity: function getWithdrawAddress() view returns(address)
func (_Contract *ContractCaller) GetWithdrawAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getWithdrawAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetWithdrawAddress is a free data retrieval call binding the contract method 0xe8e7f800.
//
// Solidity: function getWithdrawAddress() view returns(address)
func (_Contract *ContractSession) GetWithdrawAddress() (common.Address, error) {
	return _Contract.Contract.GetWithdrawAddress(&_Contract.CallOpts)
}

// GetWithdrawAddress is a free data retrieval call binding the contract method 0xe8e7f800.
//
// Solidity: function getWithdrawAddress() view returns(address)
func (_Contract *ContractCallerSession) GetWithdrawAddress() (common.Address, error) {
	return _Contract.Contract.GetWithdrawAddress(&_Contract.CallOpts)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Contract *ContractCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Contract *ContractSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Contract.Contract.HasRole(&_Contract.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Contract *ContractCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Contract.Contract.HasRole(&_Contract.CallOpts, role, account)
}

// LastTimeRewardApplicable is a free data retrieval call binding the contract method 0x638634ee.
//
// Solidity: function lastTimeRewardApplicable(address _rewardsToken) view returns(uint256)
func (_Contract *ContractCaller) LastTimeRewardApplicable(opts *bind.CallOpts, _rewardsToken common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "lastTimeRewardApplicable", _rewardsToken)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastTimeRewardApplicable is a free data retrieval call binding the contract method 0x638634ee.
//
// Solidity: function lastTimeRewardApplicable(address _rewardsToken) view returns(uint256)
func (_Contract *ContractSession) LastTimeRewardApplicable(_rewardsToken common.Address) (*big.Int, error) {
	return _Contract.Contract.LastTimeRewardApplicable(&_Contract.CallOpts, _rewardsToken)
}

// LastTimeRewardApplicable is a free data retrieval call binding the contract method 0x638634ee.
//
// Solidity: function lastTimeRewardApplicable(address _rewardsToken) view returns(uint256)
func (_Contract *ContractCallerSession) LastTimeRewardApplicable(_rewardsToken common.Address) (*big.Int, error) {
	return _Contract.Contract.LastTimeRewardApplicable(&_Contract.CallOpts, _rewardsToken)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Contract *ContractCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Contract *ContractSession) Paused() (bool, error) {
	return _Contract.Contract.Paused(&_Contract.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Contract *ContractCallerSession) Paused() (bool, error) {
	return _Contract.Contract.Paused(&_Contract.CallOpts)
}

// RewardData is a free data retrieval call binding the contract method 0x48e5d9f8.
//
// Solidity: function rewardData(address ) view returns(address rewardsDistributor, uint256 rewardsDuration, uint256 periodFinish, uint256 rewardRate, uint256 lastUpdateTime, uint256 rewardPerTokenStored)
func (_Contract *ContractCaller) RewardData(opts *bind.CallOpts, arg0 common.Address) (struct {
	RewardsDistributor   common.Address
	RewardsDuration      *big.Int
	PeriodFinish         *big.Int
	RewardRate           *big.Int
	LastUpdateTime       *big.Int
	RewardPerTokenStored *big.Int
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "rewardData", arg0)

	outstruct := new(struct {
		RewardsDistributor   common.Address
		RewardsDuration      *big.Int
		PeriodFinish         *big.Int
		RewardRate           *big.Int
		LastUpdateTime       *big.Int
		RewardPerTokenStored *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.RewardsDistributor = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.RewardsDuration = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.PeriodFinish = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.RewardRate = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.LastUpdateTime = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.RewardPerTokenStored = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RewardData is a free data retrieval call binding the contract method 0x48e5d9f8.
//
// Solidity: function rewardData(address ) view returns(address rewardsDistributor, uint256 rewardsDuration, uint256 periodFinish, uint256 rewardRate, uint256 lastUpdateTime, uint256 rewardPerTokenStored)
func (_Contract *ContractSession) RewardData(arg0 common.Address) (struct {
	RewardsDistributor   common.Address
	RewardsDuration      *big.Int
	PeriodFinish         *big.Int
	RewardRate           *big.Int
	LastUpdateTime       *big.Int
	RewardPerTokenStored *big.Int
}, error) {
	return _Contract.Contract.RewardData(&_Contract.CallOpts, arg0)
}

// RewardData is a free data retrieval call binding the contract method 0x48e5d9f8.
//
// Solidity: function rewardData(address ) view returns(address rewardsDistributor, uint256 rewardsDuration, uint256 periodFinish, uint256 rewardRate, uint256 lastUpdateTime, uint256 rewardPerTokenStored)
func (_Contract *ContractCallerSession) RewardData(arg0 common.Address) (struct {
	RewardsDistributor   common.Address
	RewardsDuration      *big.Int
	PeriodFinish         *big.Int
	RewardRate           *big.Int
	LastUpdateTime       *big.Int
	RewardPerTokenStored *big.Int
}, error) {
	return _Contract.Contract.RewardData(&_Contract.CallOpts, arg0)
}

// RewardPerToken is a free data retrieval call binding the contract method 0xf1229777.
//
// Solidity: function rewardPerToken(address _rewardsToken) view returns(uint256)
func (_Contract *ContractCaller) RewardPerToken(opts *bind.CallOpts, _rewardsToken common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "rewardPerToken", _rewardsToken)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardPerToken is a free data retrieval call binding the contract method 0xf1229777.
//
// Solidity: function rewardPerToken(address _rewardsToken) view returns(uint256)
func (_Contract *ContractSession) RewardPerToken(_rewardsToken common.Address) (*big.Int, error) {
	return _Contract.Contract.RewardPerToken(&_Contract.CallOpts, _rewardsToken)
}

// RewardPerToken is a free data retrieval call binding the contract method 0xf1229777.
//
// Solidity: function rewardPerToken(address _rewardsToken) view returns(uint256)
func (_Contract *ContractCallerSession) RewardPerToken(_rewardsToken common.Address) (*big.Int, error) {
	return _Contract.Contract.RewardPerToken(&_Contract.CallOpts, _rewardsToken)
}

// RewardTokens is a free data retrieval call binding the contract method 0x7bb7bed1.
//
// Solidity: function rewardTokens(uint256 ) view returns(address)
func (_Contract *ContractCaller) RewardTokens(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "rewardTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardTokens is a free data retrieval call binding the contract method 0x7bb7bed1.
//
// Solidity: function rewardTokens(uint256 ) view returns(address)
func (_Contract *ContractSession) RewardTokens(arg0 *big.Int) (common.Address, error) {
	return _Contract.Contract.RewardTokens(&_Contract.CallOpts, arg0)
}

// RewardTokens is a free data retrieval call binding the contract method 0x7bb7bed1.
//
// Solidity: function rewardTokens(uint256 ) view returns(address)
func (_Contract *ContractCallerSession) RewardTokens(arg0 *big.Int) (common.Address, error) {
	return _Contract.Contract.RewardTokens(&_Contract.CallOpts, arg0)
}

// Rewards is a free data retrieval call binding the contract method 0xe70b9e27.
//
// Solidity: function rewards(address , address ) view returns(uint256)
func (_Contract *ContractCaller) Rewards(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "rewards", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Rewards is a free data retrieval call binding the contract method 0xe70b9e27.
//
// Solidity: function rewards(address , address ) view returns(uint256)
func (_Contract *ContractSession) Rewards(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Contract.Contract.Rewards(&_Contract.CallOpts, arg0, arg1)
}

// Rewards is a free data retrieval call binding the contract method 0xe70b9e27.
//
// Solidity: function rewards(address , address ) view returns(uint256)
func (_Contract *ContractCallerSession) Rewards(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Contract.Contract.Rewards(&_Contract.CallOpts, arg0, arg1)
}

// StakingToken is a free data retrieval call binding the contract method 0x72f702f3.
//
// Solidity: function stakingToken() view returns(address)
func (_Contract *ContractCaller) StakingToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "stakingToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakingToken is a free data retrieval call binding the contract method 0x72f702f3.
//
// Solidity: function stakingToken() view returns(address)
func (_Contract *ContractSession) StakingToken() (common.Address, error) {
	return _Contract.Contract.StakingToken(&_Contract.CallOpts)
}

// StakingToken is a free data retrieval call binding the contract method 0x72f702f3.
//
// Solidity: function stakingToken() view returns(address)
func (_Contract *ContractCallerSession) StakingToken() (common.Address, error) {
	return _Contract.Contract.StakingToken(&_Contract.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractSession) TotalSupply() (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractCallerSession) TotalSupply() (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts)
}

// UserRewardPerTokenPaid is a free data retrieval call binding the contract method 0x7035ab98.
//
// Solidity: function userRewardPerTokenPaid(address , address ) view returns(uint256)
func (_Contract *ContractCaller) UserRewardPerTokenPaid(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "userRewardPerTokenPaid", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserRewardPerTokenPaid is a free data retrieval call binding the contract method 0x7035ab98.
//
// Solidity: function userRewardPerTokenPaid(address , address ) view returns(uint256)
func (_Contract *ContractSession) UserRewardPerTokenPaid(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Contract.Contract.UserRewardPerTokenPaid(&_Contract.CallOpts, arg0, arg1)
}

// UserRewardPerTokenPaid is a free data retrieval call binding the contract method 0x7035ab98.
//
// Solidity: function userRewardPerTokenPaid(address , address ) view returns(uint256)
func (_Contract *ContractCallerSession) UserRewardPerTokenPaid(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Contract.Contract.UserRewardPerTokenPaid(&_Contract.CallOpts, arg0, arg1)
}

// AddReward is a paid mutator transaction binding the contract method 0x9feb8f50.
//
// Solidity: function addReward(address _rewardsToken, uint256 _rewardsDuration) returns()
func (_Contract *ContractTransactor) AddReward(opts *bind.TransactOpts, _rewardsToken common.Address, _rewardsDuration *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "addReward", _rewardsToken, _rewardsDuration)
}

// AddReward is a paid mutator transaction binding the contract method 0x9feb8f50.
//
// Solidity: function addReward(address _rewardsToken, uint256 _rewardsDuration) returns()
func (_Contract *ContractSession) AddReward(_rewardsToken common.Address, _rewardsDuration *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.AddReward(&_Contract.TransactOpts, _rewardsToken, _rewardsDuration)
}

// AddReward is a paid mutator transaction binding the contract method 0x9feb8f50.
//
// Solidity: function addReward(address _rewardsToken, uint256 _rewardsDuration) returns()
func (_Contract *ContractTransactorSession) AddReward(_rewardsToken common.Address, _rewardsDuration *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.AddReward(&_Contract.TransactOpts, _rewardsToken, _rewardsDuration)
}

// ClaimRewardsPrecompile is a paid mutator transaction binding the contract method 0x1668100a.
//
// Solidity: function claimRewardsPrecompile() returns(uint256 _amt)
func (_Contract *ContractTransactor) ClaimRewardsPrecompile(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "claimRewardsPrecompile")
}

// ClaimRewardsPrecompile is a paid mutator transaction binding the contract method 0x1668100a.
//
// Solidity: function claimRewardsPrecompile() returns(uint256 _amt)
func (_Contract *ContractSession) ClaimRewardsPrecompile() (*types.Transaction, error) {
	return _Contract.Contract.ClaimRewardsPrecompile(&_Contract.TransactOpts)
}

// ClaimRewardsPrecompile is a paid mutator transaction binding the contract method 0x1668100a.
//
// Solidity: function claimRewardsPrecompile() returns(uint256 _amt)
func (_Contract *ContractTransactorSession) ClaimRewardsPrecompile() (*types.Transaction, error) {
	return _Contract.Contract.ClaimRewardsPrecompile(&_Contract.TransactOpts)
}

// Exit is a paid mutator transaction binding the contract method 0xe9fad8ee.
//
// Solidity: function exit() returns()
func (_Contract *ContractTransactor) Exit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "exit")
}

// Exit is a paid mutator transaction binding the contract method 0xe9fad8ee.
//
// Solidity: function exit() returns()
func (_Contract *ContractSession) Exit() (*types.Transaction, error) {
	return _Contract.Contract.Exit(&_Contract.TransactOpts)
}

// Exit is a paid mutator transaction binding the contract method 0xe9fad8ee.
//
// Solidity: function exit() returns()
func (_Contract *ContractTransactorSession) Exit() (*types.Transaction, error) {
	return _Contract.Contract.Exit(&_Contract.TransactOpts)
}

// GetReward is a paid mutator transaction binding the contract method 0x3d18b912.
//
// Solidity: function getReward() returns()
func (_Contract *ContractTransactor) GetReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "getReward")
}

// GetReward is a paid mutator transaction binding the contract method 0x3d18b912.
//
// Solidity: function getReward() returns()
func (_Contract *ContractSession) GetReward() (*types.Transaction, error) {
	return _Contract.Contract.GetReward(&_Contract.TransactOpts)
}

// GetReward is a paid mutator transaction binding the contract method 0x3d18b912.
//
// Solidity: function getReward() returns()
func (_Contract *ContractTransactorSession) GetReward() (*types.Transaction, error) {
	return _Contract.Contract.GetReward(&_Contract.TransactOpts)
}

// GetRewardForUser is a paid mutator transaction binding the contract method 0xef790a82.
//
// Solidity: function getRewardForUser(address _user) returns()
func (_Contract *ContractTransactor) GetRewardForUser(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "getRewardForUser", _user)
}

// GetRewardForUser is a paid mutator transaction binding the contract method 0xef790a82.
//
// Solidity: function getRewardForUser(address _user) returns()
func (_Contract *ContractSession) GetRewardForUser(_user common.Address) (*types.Transaction, error) {
	return _Contract.Contract.GetRewardForUser(&_Contract.TransactOpts, _user)
}

// GetRewardForUser is a paid mutator transaction binding the contract method 0xef790a82.
//
// Solidity: function getRewardForUser(address _user) returns()
func (_Contract *ContractTransactorSession) GetRewardForUser(_user common.Address) (*types.Transaction, error) {
	return _Contract.Contract.GetRewardForUser(&_Contract.TransactOpts, _user)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Contract *ContractTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Contract *ContractSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.Contract.GrantRole(&_Contract.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Contract *ContractTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.Contract.GrantRole(&_Contract.TransactOpts, role, account)
}

// NotifyRewardAmount is a paid mutator transaction binding the contract method 0xb66503cf.
//
// Solidity: function notifyRewardAmount(address _rewardToken, uint256 _reward) returns()
func (_Contract *ContractTransactor) NotifyRewardAmount(opts *bind.TransactOpts, _rewardToken common.Address, _reward *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "notifyRewardAmount", _rewardToken, _reward)
}

// NotifyRewardAmount is a paid mutator transaction binding the contract method 0xb66503cf.
//
// Solidity: function notifyRewardAmount(address _rewardToken, uint256 _reward) returns()
func (_Contract *ContractSession) NotifyRewardAmount(_rewardToken common.Address, _reward *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.NotifyRewardAmount(&_Contract.TransactOpts, _rewardToken, _reward)
}

// NotifyRewardAmount is a paid mutator transaction binding the contract method 0xb66503cf.
//
// Solidity: function notifyRewardAmount(address _rewardToken, uint256 _reward) returns()
func (_Contract *ContractTransactorSession) NotifyRewardAmount(_rewardToken common.Address, _reward *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.NotifyRewardAmount(&_Contract.TransactOpts, _rewardToken, _reward)
}

// RecoverERC20 is a paid mutator transaction binding the contract method 0x1171bda9.
//
// Solidity: function recoverERC20(address _to, address _token, uint256 _amount) returns()
func (_Contract *ContractTransactor) RecoverERC20(opts *bind.TransactOpts, _to common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "recoverERC20", _to, _token, _amount)
}

// RecoverERC20 is a paid mutator transaction binding the contract method 0x1171bda9.
//
// Solidity: function recoverERC20(address _to, address _token, uint256 _amount) returns()
func (_Contract *ContractSession) RecoverERC20(_to common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.RecoverERC20(&_Contract.TransactOpts, _to, _token, _amount)
}

// RecoverERC20 is a paid mutator transaction binding the contract method 0x1171bda9.
//
// Solidity: function recoverERC20(address _to, address _token, uint256 _amount) returns()
func (_Contract *ContractTransactorSession) RecoverERC20(_to common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.RecoverERC20(&_Contract.TransactOpts, _to, _token, _amount)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Contract *ContractTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Contract *ContractSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RenounceRole(&_Contract.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_Contract *ContractTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RenounceRole(&_Contract.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Contract *ContractTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Contract *ContractSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RevokeRole(&_Contract.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Contract *ContractTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RevokeRole(&_Contract.TransactOpts, role, account)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 amount) returns()
func (_Contract *ContractTransactor) Stake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "stake", amount)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 amount) returns()
func (_Contract *ContractSession) Stake(amount *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Stake(&_Contract.TransactOpts, amount)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 amount) returns()
func (_Contract *ContractTransactorSession) Stake(amount *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Stake(&_Contract.TransactOpts, amount)
}

// TogglePause is a paid mutator transaction binding the contract method 0xc4ae3168.
//
// Solidity: function togglePause() returns()
func (_Contract *ContractTransactor) TogglePause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "togglePause")
}

// TogglePause is a paid mutator transaction binding the contract method 0xc4ae3168.
//
// Solidity: function togglePause() returns()
func (_Contract *ContractSession) TogglePause() (*types.Transaction, error) {
	return _Contract.Contract.TogglePause(&_Contract.TransactOpts)
}

// TogglePause is a paid mutator transaction binding the contract method 0xc4ae3168.
//
// Solidity: function togglePause() returns()
func (_Contract *ContractTransactorSession) TogglePause() (*types.Transaction, error) {
	return _Contract.Contract.TogglePause(&_Contract.TransactOpts)
}

// UpdateRewardsDuration is a paid mutator transaction binding the contract method 0xc004ac61.
//
// Solidity: function updateRewardsDuration(address _rewardsToken, uint256 _rewardsDuration) returns()
func (_Contract *ContractTransactor) UpdateRewardsDuration(opts *bind.TransactOpts, _rewardsToken common.Address, _rewardsDuration *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "updateRewardsDuration", _rewardsToken, _rewardsDuration)
}

// UpdateRewardsDuration is a paid mutator transaction binding the contract method 0xc004ac61.
//
// Solidity: function updateRewardsDuration(address _rewardsToken, uint256 _rewardsDuration) returns()
func (_Contract *ContractSession) UpdateRewardsDuration(_rewardsToken common.Address, _rewardsDuration *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.UpdateRewardsDuration(&_Contract.TransactOpts, _rewardsToken, _rewardsDuration)
}

// UpdateRewardsDuration is a paid mutator transaction binding the contract method 0xc004ac61.
//
// Solidity: function updateRewardsDuration(address _rewardsToken, uint256 _rewardsDuration) returns()
func (_Contract *ContractTransactorSession) UpdateRewardsDuration(_rewardsToken common.Address, _rewardsDuration *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.UpdateRewardsDuration(&_Contract.TransactOpts, _rewardsToken, _rewardsDuration)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Contract *ContractTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Contract *ContractSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Withdraw(&_Contract.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Contract *ContractTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Withdraw(&_Contract.TransactOpts, amount)
}

// ContractClaimRewardsPrecompileIterator is returned from FilterClaimRewardsPrecompile and is used to iterate over the raw logs and unpacked data for ClaimRewardsPrecompile events raised by the Contract contract.
type ContractClaimRewardsPrecompileIterator struct {
	Event *ContractClaimRewardsPrecompile // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractClaimRewardsPrecompileIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractClaimRewardsPrecompile)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractClaimRewardsPrecompile)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractClaimRewardsPrecompileIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractClaimRewardsPrecompileIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractClaimRewardsPrecompile represents a ClaimRewardsPrecompile event raised by the Contract contract.
type ContractClaimRewardsPrecompile struct {
	Sender common.Address
	Amt    *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterClaimRewardsPrecompile is a free log retrieval operation binding the contract event 0xb7a755b112a307af4a5aa3ad493461021b8f07e3c5a02599a8ade84a7d2b678e.
//
// Solidity: event ClaimRewardsPrecompile(address _sender, uint256 _amt)
func (_Contract *ContractFilterer) FilterClaimRewardsPrecompile(opts *bind.FilterOpts) (*ContractClaimRewardsPrecompileIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ClaimRewardsPrecompile")
	if err != nil {
		return nil, err
	}
	return &ContractClaimRewardsPrecompileIterator{contract: _Contract.contract, event: "ClaimRewardsPrecompile", logs: logs, sub: sub}, nil
}

// WatchClaimRewardsPrecompile is a free log subscription operation binding the contract event 0xb7a755b112a307af4a5aa3ad493461021b8f07e3c5a02599a8ade84a7d2b678e.
//
// Solidity: event ClaimRewardsPrecompile(address _sender, uint256 _amt)
func (_Contract *ContractFilterer) WatchClaimRewardsPrecompile(opts *bind.WatchOpts, sink chan<- *ContractClaimRewardsPrecompile) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ClaimRewardsPrecompile")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractClaimRewardsPrecompile)
				if err := _Contract.contract.UnpackLog(event, "ClaimRewardsPrecompile", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimRewardsPrecompile is a log parse operation binding the contract event 0xb7a755b112a307af4a5aa3ad493461021b8f07e3c5a02599a8ade84a7d2b678e.
//
// Solidity: event ClaimRewardsPrecompile(address _sender, uint256 _amt)
func (_Contract *ContractFilterer) ParseClaimRewardsPrecompile(log types.Log) (*ContractClaimRewardsPrecompile, error) {
	event := new(ContractClaimRewardsPrecompile)
	if err := _Contract.contract.UnpackLog(event, "ClaimRewardsPrecompile", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Contract contract.
type ContractPausedIterator struct {
	Event *ContractPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractPaused represents a Paused event raised by the Contract contract.
type ContractPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Contract *ContractFilterer) FilterPaused(opts *bind.FilterOpts) (*ContractPausedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ContractPausedIterator{contract: _Contract.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Contract *ContractFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractPaused) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractPaused)
				if err := _Contract.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Contract *ContractFilterer) ParsePaused(log types.Log) (*ContractPaused, error) {
	event := new(ContractPaused)
	if err := _Contract.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRecoveredIterator is returned from FilterRecovered and is used to iterate over the raw logs and unpacked data for Recovered events raised by the Contract contract.
type ContractRecoveredIterator struct {
	Event *ContractRecovered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRecoveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRecovered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRecovered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRecoveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRecoveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRecovered represents a Recovered event raised by the Contract contract.
type ContractRecovered struct {
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRecovered is a free log retrieval operation binding the contract event 0x8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28.
//
// Solidity: event Recovered(address token, uint256 amount)
func (_Contract *ContractFilterer) FilterRecovered(opts *bind.FilterOpts) (*ContractRecoveredIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Recovered")
	if err != nil {
		return nil, err
	}
	return &ContractRecoveredIterator{contract: _Contract.contract, event: "Recovered", logs: logs, sub: sub}, nil
}

// WatchRecovered is a free log subscription operation binding the contract event 0x8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28.
//
// Solidity: event Recovered(address token, uint256 amount)
func (_Contract *ContractFilterer) WatchRecovered(opts *bind.WatchOpts, sink chan<- *ContractRecovered) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Recovered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRecovered)
				if err := _Contract.contract.UnpackLog(event, "Recovered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecovered is a log parse operation binding the contract event 0x8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28.
//
// Solidity: event Recovered(address token, uint256 amount)
func (_Contract *ContractFilterer) ParseRecovered(log types.Log) (*ContractRecovered, error) {
	event := new(ContractRecovered)
	if err := _Contract.contract.UnpackLog(event, "Recovered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRewardAddedIterator is returned from FilterRewardAdded and is used to iterate over the raw logs and unpacked data for RewardAdded events raised by the Contract contract.
type ContractRewardAddedIterator struct {
	Event *ContractRewardAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRewardAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRewardAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRewardAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRewardAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRewardAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRewardAdded represents a RewardAdded event raised by the Contract contract.
type ContractRewardAdded struct {
	Reward *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRewardAdded is a free log retrieval operation binding the contract event 0xde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d.
//
// Solidity: event RewardAdded(uint256 reward)
func (_Contract *ContractFilterer) FilterRewardAdded(opts *bind.FilterOpts) (*ContractRewardAddedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RewardAdded")
	if err != nil {
		return nil, err
	}
	return &ContractRewardAddedIterator{contract: _Contract.contract, event: "RewardAdded", logs: logs, sub: sub}, nil
}

// WatchRewardAdded is a free log subscription operation binding the contract event 0xde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d.
//
// Solidity: event RewardAdded(uint256 reward)
func (_Contract *ContractFilterer) WatchRewardAdded(opts *bind.WatchOpts, sink chan<- *ContractRewardAdded) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RewardAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRewardAdded)
				if err := _Contract.contract.UnpackLog(event, "RewardAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardAdded is a log parse operation binding the contract event 0xde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d.
//
// Solidity: event RewardAdded(uint256 reward)
func (_Contract *ContractFilterer) ParseRewardAdded(log types.Log) (*ContractRewardAdded, error) {
	event := new(ContractRewardAdded)
	if err := _Contract.contract.UnpackLog(event, "RewardAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRewardPaidIterator is returned from FilterRewardPaid and is used to iterate over the raw logs and unpacked data for RewardPaid events raised by the Contract contract.
type ContractRewardPaidIterator struct {
	Event *ContractRewardPaid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRewardPaidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRewardPaid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRewardPaid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRewardPaidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRewardPaidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRewardPaid represents a RewardPaid event raised by the Contract contract.
type ContractRewardPaid struct {
	User         common.Address
	RewardsToken common.Address
	Reward       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRewardPaid is a free log retrieval operation binding the contract event 0x540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e.
//
// Solidity: event RewardPaid(address indexed user, address indexed rewardsToken, uint256 reward)
func (_Contract *ContractFilterer) FilterRewardPaid(opts *bind.FilterOpts, user []common.Address, rewardsToken []common.Address) (*ContractRewardPaidIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var rewardsTokenRule []interface{}
	for _, rewardsTokenItem := range rewardsToken {
		rewardsTokenRule = append(rewardsTokenRule, rewardsTokenItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RewardPaid", userRule, rewardsTokenRule)
	if err != nil {
		return nil, err
	}
	return &ContractRewardPaidIterator{contract: _Contract.contract, event: "RewardPaid", logs: logs, sub: sub}, nil
}

// WatchRewardPaid is a free log subscription operation binding the contract event 0x540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e.
//
// Solidity: event RewardPaid(address indexed user, address indexed rewardsToken, uint256 reward)
func (_Contract *ContractFilterer) WatchRewardPaid(opts *bind.WatchOpts, sink chan<- *ContractRewardPaid, user []common.Address, rewardsToken []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var rewardsTokenRule []interface{}
	for _, rewardsTokenItem := range rewardsToken {
		rewardsTokenRule = append(rewardsTokenRule, rewardsTokenItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RewardPaid", userRule, rewardsTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRewardPaid)
				if err := _Contract.contract.UnpackLog(event, "RewardPaid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardPaid is a log parse operation binding the contract event 0x540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e.
//
// Solidity: event RewardPaid(address indexed user, address indexed rewardsToken, uint256 reward)
func (_Contract *ContractFilterer) ParseRewardPaid(log types.Log) (*ContractRewardPaid, error) {
	event := new(ContractRewardPaid)
	if err := _Contract.contract.UnpackLog(event, "RewardPaid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRewardStoredIterator is returned from FilterRewardStored and is used to iterate over the raw logs and unpacked data for RewardStored events raised by the Contract contract.
type ContractRewardStoredIterator struct {
	Event *ContractRewardStored // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRewardStoredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRewardStored)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRewardStored)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRewardStoredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRewardStoredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRewardStored represents a RewardStored event raised by the Contract contract.
type ContractRewardStored struct {
	RewardsToken    common.Address
	RewardsDuration *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRewardStored is a free log retrieval operation binding the contract event 0x7589b0732052d2ded19f37e278ed2ae0d7d2e93b21d3931b73c5200a13671653.
//
// Solidity: event RewardStored(address rewardsToken, uint256 rewardsDuration)
func (_Contract *ContractFilterer) FilterRewardStored(opts *bind.FilterOpts) (*ContractRewardStoredIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RewardStored")
	if err != nil {
		return nil, err
	}
	return &ContractRewardStoredIterator{contract: _Contract.contract, event: "RewardStored", logs: logs, sub: sub}, nil
}

// WatchRewardStored is a free log subscription operation binding the contract event 0x7589b0732052d2ded19f37e278ed2ae0d7d2e93b21d3931b73c5200a13671653.
//
// Solidity: event RewardStored(address rewardsToken, uint256 rewardsDuration)
func (_Contract *ContractFilterer) WatchRewardStored(opts *bind.WatchOpts, sink chan<- *ContractRewardStored) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RewardStored")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRewardStored)
				if err := _Contract.contract.UnpackLog(event, "RewardStored", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardStored is a log parse operation binding the contract event 0x7589b0732052d2ded19f37e278ed2ae0d7d2e93b21d3931b73c5200a13671653.
//
// Solidity: event RewardStored(address rewardsToken, uint256 rewardsDuration)
func (_Contract *ContractFilterer) ParseRewardStored(log types.Log) (*ContractRewardStored, error) {
	event := new(ContractRewardStored)
	if err := _Contract.contract.UnpackLog(event, "RewardStored", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRewardsDurationUpdatedIterator is returned from FilterRewardsDurationUpdated and is used to iterate over the raw logs and unpacked data for RewardsDurationUpdated events raised by the Contract contract.
type ContractRewardsDurationUpdatedIterator struct {
	Event *ContractRewardsDurationUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRewardsDurationUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRewardsDurationUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRewardsDurationUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRewardsDurationUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRewardsDurationUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRewardsDurationUpdated represents a RewardsDurationUpdated event raised by the Contract contract.
type ContractRewardsDurationUpdated struct {
	Token       common.Address
	NewDuration *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardsDurationUpdated is a free log retrieval operation binding the contract event 0xad2f86b01ed93b4b3a150d448c61a4f5d8d38075d3c0c64cc0a26fd6e1f49545.
//
// Solidity: event RewardsDurationUpdated(address token, uint256 newDuration)
func (_Contract *ContractFilterer) FilterRewardsDurationUpdated(opts *bind.FilterOpts) (*ContractRewardsDurationUpdatedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RewardsDurationUpdated")
	if err != nil {
		return nil, err
	}
	return &ContractRewardsDurationUpdatedIterator{contract: _Contract.contract, event: "RewardsDurationUpdated", logs: logs, sub: sub}, nil
}

// WatchRewardsDurationUpdated is a free log subscription operation binding the contract event 0xad2f86b01ed93b4b3a150d448c61a4f5d8d38075d3c0c64cc0a26fd6e1f49545.
//
// Solidity: event RewardsDurationUpdated(address token, uint256 newDuration)
func (_Contract *ContractFilterer) WatchRewardsDurationUpdated(opts *bind.WatchOpts, sink chan<- *ContractRewardsDurationUpdated) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RewardsDurationUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRewardsDurationUpdated)
				if err := _Contract.contract.UnpackLog(event, "RewardsDurationUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardsDurationUpdated is a log parse operation binding the contract event 0xad2f86b01ed93b4b3a150d448c61a4f5d8d38075d3c0c64cc0a26fd6e1f49545.
//
// Solidity: event RewardsDurationUpdated(address token, uint256 newDuration)
func (_Contract *ContractFilterer) ParseRewardsDurationUpdated(log types.Log) (*ContractRewardsDurationUpdated, error) {
	event := new(ContractRewardsDurationUpdated)
	if err := _Contract.contract.UnpackLog(event, "RewardsDurationUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Contract contract.
type ContractRoleAdminChangedIterator struct {
	Event *ContractRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRoleAdminChanged represents a RoleAdminChanged event raised by the Contract contract.
type ContractRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Contract *ContractFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*ContractRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &ContractRoleAdminChangedIterator{contract: _Contract.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Contract *ContractFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *ContractRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRoleAdminChanged)
				if err := _Contract.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Contract *ContractFilterer) ParseRoleAdminChanged(log types.Log) (*ContractRoleAdminChanged, error) {
	event := new(ContractRoleAdminChanged)
	if err := _Contract.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Contract contract.
type ContractRoleGrantedIterator struct {
	Event *ContractRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRoleGranted represents a RoleGranted event raised by the Contract contract.
type ContractRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ContractRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ContractRoleGrantedIterator{contract: _Contract.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ContractRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRoleGranted)
				if err := _Contract.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) ParseRoleGranted(log types.Log) (*ContractRoleGranted, error) {
	event := new(ContractRoleGranted)
	if err := _Contract.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Contract contract.
type ContractRoleRevokedIterator struct {
	Event *ContractRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRoleRevoked represents a RoleRevoked event raised by the Contract contract.
type ContractRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ContractRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ContractRoleRevokedIterator{contract: _Contract.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ContractRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRoleRevoked)
				if err := _Contract.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Contract *ContractFilterer) ParseRoleRevoked(log types.Log) (*ContractRoleRevoked, error) {
	event := new(ContractRoleRevoked)
	if err := _Contract.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the Contract contract.
type ContractStakedIterator struct {
	Event *ContractStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStaked represents a Staked event raised by the Contract contract.
type ContractStaked struct {
	User   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed user, uint256 amount)
func (_Contract *ContractFilterer) FilterStaked(opts *bind.FilterOpts, user []common.Address) (*ContractStakedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Staked", userRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakedIterator{contract: _Contract.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed user, uint256 amount)
func (_Contract *ContractFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *ContractStaked, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Staked", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStaked)
				if err := _Contract.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed user, uint256 amount)
func (_Contract *ContractFilterer) ParseStaked(log types.Log) (*ContractStaked, error) {
	event := new(ContractStaked)
	if err := _Contract.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Contract contract.
type ContractUnpausedIterator struct {
	Event *ContractUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractUnpaused represents a Unpaused event raised by the Contract contract.
type ContractUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Contract *ContractFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ContractUnpausedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ContractUnpausedIterator{contract: _Contract.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Contract *ContractFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractUnpaused) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractUnpaused)
				if err := _Contract.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Contract *ContractFilterer) ParseUnpaused(log types.Log) (*ContractUnpaused, error) {
	event := new(ContractUnpaused)
	if err := _Contract.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractUpdateWithdrawAddressIterator is returned from FilterUpdateWithdrawAddress and is used to iterate over the raw logs and unpacked data for UpdateWithdrawAddress events raised by the Contract contract.
type ContractUpdateWithdrawAddressIterator struct {
	Event *ContractUpdateWithdrawAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractUpdateWithdrawAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractUpdateWithdrawAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractUpdateWithdrawAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractUpdateWithdrawAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractUpdateWithdrawAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractUpdateWithdrawAddress represents a UpdateWithdrawAddress event raised by the Contract contract.
type ContractUpdateWithdrawAddress struct {
	Sender             common.Address
	OldWithdrawAddress common.Address
	NewWithdrawAddress common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterUpdateWithdrawAddress is a free log retrieval operation binding the contract event 0xd5501eaba1b35bdc5070440d6a391388c10c0dfc6b4d97ae7abed9f0bb00f328.
//
// Solidity: event UpdateWithdrawAddress(address _sender, address _oldWithdrawAddress, address _newWithdrawAddress)
func (_Contract *ContractFilterer) FilterUpdateWithdrawAddress(opts *bind.FilterOpts) (*ContractUpdateWithdrawAddressIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "UpdateWithdrawAddress")
	if err != nil {
		return nil, err
	}
	return &ContractUpdateWithdrawAddressIterator{contract: _Contract.contract, event: "UpdateWithdrawAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateWithdrawAddress is a free log subscription operation binding the contract event 0xd5501eaba1b35bdc5070440d6a391388c10c0dfc6b4d97ae7abed9f0bb00f328.
//
// Solidity: event UpdateWithdrawAddress(address _sender, address _oldWithdrawAddress, address _newWithdrawAddress)
func (_Contract *ContractFilterer) WatchUpdateWithdrawAddress(opts *bind.WatchOpts, sink chan<- *ContractUpdateWithdrawAddress) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "UpdateWithdrawAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractUpdateWithdrawAddress)
				if err := _Contract.contract.UnpackLog(event, "UpdateWithdrawAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateWithdrawAddress is a log parse operation binding the contract event 0xd5501eaba1b35bdc5070440d6a391388c10c0dfc6b4d97ae7abed9f0bb00f328.
//
// Solidity: event UpdateWithdrawAddress(address _sender, address _oldWithdrawAddress, address _newWithdrawAddress)
func (_Contract *ContractFilterer) ParseUpdateWithdrawAddress(log types.Log) (*ContractUpdateWithdrawAddress, error) {
	event := new(ContractUpdateWithdrawAddress)
	if err := _Contract.contract.UnpackLog(event, "UpdateWithdrawAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractWithdrawnIterator is returned from FilterWithdrawn and is used to iterate over the raw logs and unpacked data for Withdrawn events raised by the Contract contract.
type ContractWithdrawnIterator struct {
	Event *ContractWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractWithdrawn represents a Withdrawn event raised by the Contract contract.
type ContractWithdrawn struct {
	User   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawn is a free log retrieval operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed user, uint256 amount)
func (_Contract *ContractFilterer) FilterWithdrawn(opts *bind.FilterOpts, user []common.Address) (*ContractWithdrawnIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Withdrawn", userRule)
	if err != nil {
		return nil, err
	}
	return &ContractWithdrawnIterator{contract: _Contract.contract, event: "Withdrawn", logs: logs, sub: sub}, nil
}

// WatchWithdrawn is a free log subscription operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed user, uint256 amount)
func (_Contract *ContractFilterer) WatchWithdrawn(opts *bind.WatchOpts, sink chan<- *ContractWithdrawn, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Withdrawn", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractWithdrawn)
				if err := _Contract.contract.UnpackLog(event, "Withdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawn is a log parse operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed user, uint256 amount)
func (_Contract *ContractFilterer) ParseWithdrawn(log types.Log) (*ContractWithdrawn, error) {
	event := new(ContractWithdrawn)
	if err := _Contract.contract.UnpackLog(event, "Withdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
